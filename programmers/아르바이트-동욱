#define TC1
//#define TC2

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int answer;
void select(vector<vector<int>> &last_days, vector<vector<int>> &salaries, int first_day, int max_first_day, int salary_sum) {
	answer = max(answer, salary_sum);
	if (first_day > max_first_day) return;
	// pick 1 job
	int max_job_idx = last_days[first_day].size();
	for (int job_idx = 0; job_idx < max_job_idx; ++job_idx) {
		select(last_days, salaries, last_days[first_day][job_idx], max_first_day, salary_sum + salaries[first_day][job_idx]);
	}
	// move on to next job without choosing
	select(last_days, salaries, first_day + 1, max_first_day, salary_sum);
}

// TODO : 이거 없애기
bool cmp(const vector<int> &a, const vector<int> &b) {
	return a[0] < b[0];		// compare the value of the first item (first_day)
}

int solution(vector<vector<int>> &part_times) {
	int max_first_day = (*max_element(part_times.begin(), part_times.end(), cmp))[0];
	vector<vector<int>> last_days(max_first_day + 1), salaries(max_first_day + 1);
	for (auto part_time : part_times) {
		int first_day = part_time[0];
		int last_day = part_time[1];
		int salary = part_time[2];
		last_days[first_day].push_back(last_day);
		salaries[first_day].push_back(salary);
	}
	select(last_days, salaries, 0, max_first_day, 0);
	return answer;
}

int main() {
#ifdef TC1
	vector<vector<int>> part_times = { {3, 6, 3}, {2, 4, 2}, {10, 12, 8}, {11, 15, 5}, {1, 8, 10}, {12, 13, 1} };
#elif defined (TC2)
	vector<vector<int>> part_times = { {1, 2, 1}, {1, 2, 2}, {2, 3, 1}, {3, 4, 1}, {1, 4, 2} };
#endif
cout << solution(part_times) << endl;
	return 0;
}
